Docker data management.
Why ?
  Store data within the writable layer of a container have some dowmsides:
  1.The data doesn’t persist when that container is no longer running, and it can be difficult to get the data out of the container if another process needs it.
  2.A container’s writable layer is tightly coupled to the host machine where the container is running. You can’t easily move the data somewhere else.
  3.Writing into a container’s writable layer requires a storage driver to manage the filesystem. The storage driver provides a union filesystem, using the Linux kernel. 
    This extra abstraction reduces performance as compared to using data volumes, which write directly to the host filesystem.

Three different ways to mount data into a container from the Docker host:
 1.volumes
 2.bind mounts
 3.tmpfs volumes
difference among them:
 1.Volumes are stored in a part of the host filesystem which is managed by Docker (/var/lib/docker/volumes/ on Linux). 
   Non-Docker processes should not modify this part of the filesystem. Volumes are the best way to persist data in Docker.
 2.Bind mounts may be stored anywhere on the host system. They may even be important system files or directories. 
   Non-Docker processes on the Docker host or a Docker container can modify them at any time.
 3.tmpfs mounts are stored in the host system’s memory only, and are never written to the host system’s filesystem.

More details about them:
 Volumes: Created and managed by Docker.  create: `docker volume create`  remove unused: `docker volume prune` 
   Volumes also support the use of volume drivers, which allow you to store your data on remote hosts or cloud providers, among other possibilities.
 Bind mounts: When you use a bind mount, a file or directory on the host machine is mounted into a container. 
   The file or directory is referenced by its full path on the host machine.If not exist,it will be create automatically
 tmpfs mounts: A tmpfs mount is not persisted on disk, neither on the Docker host nor within a container.


When to use volumes/bind mounts/tmpfs mounts ?
 Some cases to use volume:
  1.Sharing data among multiple running containers.
  2.When the Docker host is not guaranteed to have a given directory or file structure.
  3.When you want to store your container’s data on a remote host or a cloud provider, rather than locally.
  4.When you need to back up, restore, or migrate data from one Docker host to another, volumes are a better choice. 
    You can stop containers using the volume, then back up the volume’s directory (such as /var/lib/docker/volumes/<volume-name>).
 Some cases used for bind mounts:
  1.Sharing configuration files from the host machine to containers,by mounting /etc/resolv.conf from the host machine into each container
  2.Sharing source code or build artifacts between a development environment on the Docker host and a container. 
  3.When the file or directory structure of the Docker host is guaranteed to be consistent with the bind mounts the containers require.
 Use cases for tmpfs Volumes：
  1.do not want the data to persist either on the host machine or within the container and your application needs to write a large volume of non-persistent state data. 
